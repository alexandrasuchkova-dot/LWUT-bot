# bot.py ‚Äî A‚ÜîB, –∞–≤—Ç–æ—Å–º–µ–Ω–∞ —Ä–æ–ª–µ–π, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –º–Ω–æ–≥–æ–æ—Ç–≤–µ—Ç–Ω–æ—Å—Ç—å, —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
# –õ–û–ì–ò–ö–ê –ó–ê–ö–†–´–¢–ò–Ø:
# - –ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç: –¥–ª—è —Ç–æ–≥–æ, –∫—Ç–æ –ü–û–õ–£–ß–ò–õ –æ—Ç–≤–µ—Ç –ø–æ –Ω–æ–º–µ—Ä—É.
# - –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç: –∫–æ–≥–¥–∞ –æ–±–∞ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É.

import os
import json
import random
import logging
from pathlib import Path
from typing import Dict, Any, List, Set

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

TOKEN = os.getenv("TELEGRAM_TOKEN")
STATE_FILE = Path(os.getenv("STATE_FILE_PATH", "state.json"))
QUESTIONS_FILE = Path("questions.txt")
TOTAL_QUESTIONS = 127
QUESTIONS_PER_PAGE = 20   # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

# ---------- STORAGE ----------
def load_state() -> Dict[str, Any]:
    if STATE_FILE.exists():
        try:
            return json.loads(STATE_FILE.read_text(encoding="utf-8"))
        except Exception:
            logging.exception("state.json read error")
    return {
        "roles": {"A": None, "B": None},
        "pending": None,
        "draft_answers": [],
        "completed_by_user": {},
        "participants": []
    }

def save_state(s: Dict[str, Any]) -> None:
    try:
        STATE_FILE.write_text(json.dumps(s, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception:
        logging.exception("state.json write error")

def load_questions() -> List[str]:
    if QUESTIONS_FILE.exists():
        lines = [l.strip() for l in QUESTIONS_FILE.read_text(encoding="utf-8").splitlines() if l.strip()]
        if len(lines) < TOTAL_QUESTIONS:
            lines += [f"–í–æ–ø—Ä–æ—Å ‚Ññ{i}" for i in range(len(lines)+1, TOTAL_QUESTIONS+1)]
        else:
            lines = lines[:TOTAL_QUESTIONS]
        return lines
    return [f"–í–æ–ø—Ä–æ—Å ‚Ññ{i}" for i in range(1, TOTAL_QUESTIONS+1)]

QUESTIONS = load_questions()

# ---------- HELPERS ----------
def main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="ask_specific")],
        [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤)", callback_data="ask_random")],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="list_questions")],
        [InlineKeyboardButton("–ù–∞–ø–æ–º–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="repeat_q")],
        [InlineKeyboardButton("–ö—Ç–æ —Å–µ–π—á–∞—Å A/B?", callback_data="whois")],
        [InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é (—á–∞—Å—Ç–∏—á–Ω–æ/–ø–æ–ª–Ω–æ—Å—Ç—å—é)", callback_data="reset_history")],
    ])

def specific_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="list_questions")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")],
    ])

def send_answer_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–µ—Ä–µ–¥–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data="send_answer")],
        [InlineKeyboardButton("–ù–∞–ø–æ–º–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="repeat_q")]
    ])

def back_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")]])

def questions_nav_kb(page: int) -> InlineKeyboardMarkup:
    buttons = []
    if page > 0:
        buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"qpage_{page-1}"))
    if (page+1) * QUESTIONS_PER_PAGE < TOTAL_QUESTIONS:
        buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"qpage_{page+1}"))
    return InlineKeyboardMarkup([
        buttons,
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

def get_questions_page(page: int) -> str:
    start = page * QUESTIONS_PER_PAGE
    end = min(start + QUESTIONS_PER_PAGE, TOTAL_QUESTIONS)
    lines = [f"{i+1}. {QUESTIONS[i]}" for i in range(start, end)]
    return "üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n" + "\n".join(lines)

def is_user_A(state, chat_id): return state["roles"]["A"] == chat_id
def is_user_B(state, chat_id): return state["roles"]["B"] == chat_id
def roles_assigned(state): return bool(state["roles"]["A"]) and bool(state["roles"]["B"])

def get_completed_for_user(state: Dict[str, Any], user_id: int) -> Set[int]:
    return set(state.get("completed_by_user", {}).get(str(user_id), []))

def mark_completed_for_user(state: Dict[str, Any], user_id: int, qnum: int) -> None:
    key = str(user_id)
    lst = state.get("completed_by_user", {}).get(key, [])
    if qnum not in lst:
        lst.append(qnum)
        state["completed_by_user"][key] = sorted(lst)
        save_state(state)

def both_participants_ids(state: Dict[str, Any]):
    return state["roles"].get("A"), state["roles"].get("B")

def is_fully_closed(state: Dict[str, Any], qnum: int) -> bool:
    a_id, b_id = both_participants_ids(state)
    if not a_id or not b_id:
        return False
    return qnum in get_completed_for_user(state, a_id) and qnum in get_completed_for_user(state, b_id)

def remaining_numbers_for_user(state: Dict[str, Any], user_id: int) -> List[int]:
    completed_me = get_completed_for_user(state, user_id)
    pending_exclude = set([state["pending"]["qnum"]]) if state.get("pending") else set()
    result = []
    for i in range(1, TOTAL_QUESTIONS+1):
        if i in completed_me:
            continue
        if i in pending_exclude:
            continue
        if is_fully_closed(state, i):
            continue
        result.append(i)
    return result

def clear_pending(state): state["pending"] = None; state["draft_answers"] = []; save_state(state)

def auto_assign_role_on_start(state, chat_id: int) -> str:
    if chat_id not in state["participants"]:
        state["participants"].append(chat_id); save_state(state)
    if state["roles"]["A"] is None:
        state["roles"]["A"] = chat_id; save_state(state); return "A"
    if state["roles"]["B"] is None and chat_id != state["roles"]["A"]:
        state["roles"]["B"] = chat_id; save_state(state); return "B"
    if chat_id in (state["roles"]["A"], state["roles"]["B"]): return "none"
    return "none"

def maybe_assign_B(state, chat_id: int):
    if state["roles"]["A"] and state["roles"]["B"] is None and chat_id != state["roles"]["A"]:
        state["roles"]["B"] = chat_id; save_state(state)

def auto_swap_roles(state):
    state["roles"]["A"], state["roles"]["B"] = state["roles"]["B"], state["roles"]["A"]
    save_state(state)

# ---------- QUESTION HELPERS ----------
async def resend_current_question(context: ContextTypes.DEFAULT_TYPE, state: Dict[str, Any], to_chat_id: int) -> None:
    pending = state.get("pending")
    if not pending:
        await context.bot.send_message(chat_id=to_chat_id, text="–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
        return
    qnum = pending["qnum"]; qtext = QUESTIONS[qnum - 1]
    if to_chat_id == pending["from_user"]:
        hdr = "–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª:"
        tail = "–ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∏—à—å –æ—Ç–≤–µ—Ç –∏ B –Ω–∞–∂–º—ë—Ç ¬´–ü–µ—Ä–µ–¥–∞—Ç—å –æ—Ç–≤–µ—Ç¬ª, —Ä–æ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ–Ω—è—é—Ç—Å—è."
    elif to_chat_id == pending["to_user"]:
        hdr = "–ù–∞–ø–æ–º–∏–Ω–∞—é —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å:"
        tail = ("–ó–∞–≥—Ä—É–∑–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–∫—Å—Ç–∞, –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫—Ä—É–∂–æ—á–∫–∞ ‚Äî –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ. "
                "–ê –ø–æ—Å–ª–µ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ü–µ—Ä–µ–¥–∞—Ç—å –æ—Ç–≤–µ—Ç¬ª.")
    else:
        hdr = "–¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å:"; tail = ""
    msg = f"{hdr}\n\n‚Ññ{qnum}: {qtext}\n\n{tail}".strip()
    await context.bot.send_message(
        chat_id=to_chat_id, text=msg,
        reply_markup=send_answer_kb() if to_chat_id == pending.get("to_user") else None
    )

    # ---------- HANDLERS ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    chat_id = update.effective_chat.id
    assigned = auto_assign_role_on_start(state, chat_id)
    intro = ("–≠—Ç–æ—Ç –±–æ—Ç –¥–ª—è –¥–≤—É—Ö –ª—é–¥–µ–π. –ü–µ—Ä–≤—ã–π, –∫—Ç–æ –Ω–∞–∂–º—ë—Ç /start, —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è A; –≤—Ç–æ—Ä–æ–π ‚Äî B. "
             "–ü–æ—Å–ª–µ ¬´–ü–µ—Ä–µ–¥–∞—Ç—å –æ—Ç–≤–µ—Ç¬ª —Ä–æ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è—é—Ç—Å—è.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    role_msg = "–í—ã —Å—Ç–∞–ª–∏ A (–∑–∞–¥–∞—ë—Ç–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å).\n" if assigned == "A" else ("–í—ã —Å—Ç–∞–ª–∏ B (–æ—Ç–≤–µ—Ç–∏—Ç–µ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å).\n" if assigned == "B" else "")
    await update.effective_chat.send_message(role_msg + intro, reply_markup=main_menu_kb())

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_chat.send_message(
        "1) –ü–µ—Ä–≤—ã–π /start ‚Üí A. –í—Ç–æ—Ä–æ–π /start ‚Üí B.\n"
        "2) A –≤—ã–±–∏—Ä–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–ª—è –Ω–µ–≥–æ).\n"
        "3) B –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π-–æ—Ç–≤–µ—Ç–æ–≤: —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å, –∞—É–¥–∏–æ, –∫—Ä—É–∂–æ—á–µ–∫. –ü–æ—Ç–æ–º –Ω–∞–∂–∞—Ç—å ¬´–ü–µ—Ä–µ–¥–∞—Ç—å –æ—Ç–≤–µ—Ç¬ª.\n"
        "4) –ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç ‚Äî –¥–ª—è —Ç–æ–≥–æ, –∫—Ç–æ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç; –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Äî –∫–æ–≥–¥–∞ –æ–±–∞ –ø–æ–ª—É—á–∏–ª–∏.\n"
        "5) ¬´–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤¬ª ‚Äî –∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é.\n"
        "6) ¬´–ù–∞–ø–æ–º–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å¬ª ‚Äî –∫–Ω–æ–ø–∫–∞ –∏–ª–∏ /question.\n"
        "7) /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞; /list ‚Äî —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤; /reset ‚Äî –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏.",
        reply_markup=back_menu_kb()
    )

async def stats_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    a, b = state["roles"]["A"], state["roles"]["B"]
    ca = len(get_completed_for_user(state, a)) if a else 0
    cb = len(get_completed_for_user(state, b)) if b else 0
    fully = [i for i in range(1, TOTAL_QUESTIONS+1) if is_fully_closed(state, i)]
    msg = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        f"A ({a if a else '‚Äî'}): —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ {ca}\n"
        f"B ({b if b else '‚Äî'}): —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ {cb}\n"
        f"–ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç—ã–µ –Ω–æ–º–µ—Ä–∞: {fully if fully else '‚Äî'}"
    )
    await update.effective_chat.send_message(msg, reply_markup=back_menu_kb())

async def list_questions(update: Update, context: ContextTypes.DEFAULT_TYPE, from_button=False, page=0):
    text = get_questions_page(page)
    kb = questions_nav_kb(page)
    if from_button and update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=kb)
    else:
        await update.effective_chat.send_message(text, reply_markup=kb)

async def question_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    await resend_current_question(context, state, to_chat_id=update.effective_chat.id)

async def reset_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    state["completed_by_user"] = {}
    save_state(state)
    await update.effective_chat.send_message("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Å—Ç–∏—á–Ω—ã—Ö/–ø–æ–ª–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π –æ—á–∏—â–µ–Ω–∞.", reply_markup=back_menu_kb())

# ---------- on_button ----------
async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    q = update.callback_query
    await q.answer()
    data = q.data
    chat_id = q.message.chat_id

    maybe_assign_B(state, chat_id)

    if data == "back_to_menu":
        await q.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb()); return

    if data == "whois":
        a, b = state["roles"]["A"], state["roles"]["B"]
        ca = len(get_completed_for_user(state, a)) if a else 0
        cb = len(get_completed_for_user(state, b)) if b else 0
        await q.edit_message_text(f"A: {a if a else '‚Äî'} (–∑–∞–∫—Ä—ã—Ç–æ: {ca})\nB: {b if b else '‚Äî'} (–∑–∞–∫—Ä—ã—Ç–æ: {cb})", reply_markup=back_menu_kb()); return

    if data == "reset_history":
        state["completed_by_user"] = {}; save_state(state)
        await q.edit_message_text("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Å—Ç–∏—á–Ω—ã—Ö/–ø–æ–ª–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π –æ—á–∏—â–µ–Ω–∞.", reply_markup=main_menu_kb()); return

    if data == "repeat_q":
        await resend_current_question(context, state, to_chat_id=chat_id); return

    if data == "list_questions":
        await list_questions(update, context, from_button=True, page=0); return

    if data.startswith("qpage_"):
        try:
            page = int(data.split("_")[1])
        except:
            page = 0
        await list_questions(update, context, from_button=True, page=page); return

    if data == "ask_specific":
        if not is_user_A(state, chat_id):
            await q.edit_message_text("–°–µ–π—á–∞—Å –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ A.", reply_markup=back_menu_kb()); return
        if not roles_assigned(state):
            await q.edit_message_text("–û–∂–∏–¥–∞—é –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (B) ‚Äî –ø—É—Å—Ç—å –Ω–∞–∂–º—ë—Ç /start.", reply_markup=back_menu_kb()); return
        if state.get("pending"):
            await q.edit_message_text("–£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –î–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞.", reply_markup=back_menu_kb()); return
        context.user_data["await_qnum"] = True
        await q.edit_message_text(
            "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä (1..127). –î–ª—è —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–º–µ—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç.\n"
            "–ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤.",
            reply_markup=specific_menu_kb()
        ); return

    if data == "ask_random":
        if not is_user_A(state, chat_id):
            await q.edit_message_text("–°–µ–π—á–∞—Å –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ A.", reply_markup=back_menu_kb()); return
        if not roles_assigned(state):
            await q.edit_message_text("–û–∂–∏–¥–∞—é –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (B) ‚Äî –ø—É—Å—Ç—å –Ω–∞–∂–º—ë—Ç /start.", reply_markup=back_menu_kb()); return
        if state.get("pending"):
            await q.edit_message_text("–£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –î–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞.", reply_markup=back_menu_kb()); return
        remain = remaining_numbers_for_user(state, chat_id)
        if not remain:
            await q.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —Ç–µ–±—è (–≤—Å—ë —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ –¥–ª—è —Ç–µ–±—è).", reply_markup=back_menu_kb()); return
        qnum = random.choice(remain)
        await send_question(context, state, from_a=chat_id, qnum=qnum, is_random=True); return

    if data == "send_answer":
        if not is_user_B(state, chat_id):
            await q.edit_message_text("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è B.", reply_markup=back_menu_kb()); return
        if not state.get("pending") or state["pending"]["to_user"] != chat_id:
            await q.edit_message_text("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.", reply_markup=back_menu_kb()); return

        drafts: List[Dict[str, Any]] = state.get("draft_answers") or []
        if not drafts:
            await q.edit_message_text(
                "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏—è-–æ—Ç–≤–µ—Ç—ã (—Ç–µ–∫—Å—Ç/–≥–æ–ª–æ—Å/–∞—É–¥–∏–æ/–∫—Ä—É–∂–æ—á–µ–∫), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ ¬´–ü–µ—Ä–µ–¥–∞—Ç—å –æ—Ç–≤–µ—Ç¬ª. "
                "–Ø –Ω–∞–ø–æ–º–Ω—é –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ.",
                reply_markup=back_menu_kb()
            )
            await resend_current_question(context, state, to_chat_id=chat_id)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï –æ—Ç–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é (A)
        a_chat = state["pending"]["from_user"]
        qnum = state["pending"]["qnum"]
        await context.bot.send_message(chat_id=a_chat, text="–ü—Ä–∏–≤–µ—Ç, —Ç–µ–±–µ –ø—Ä–∏—à–ª–∏ –æ—Ç–≤–µ—Ç—ã!")

        for item in drafts:
            t = item["type"]; data = item["data"]
            try:
                if t == "text":
                    await context.bot.send_message(chat_id=a_chat, text=data["text"])
                elif t == "voice":
                    await context.bot.send_voice(chat_id=a_chat, voice=data["file_id"], caption=data.get("caption"))
                elif t == "audio":
                    await context.bot.send_audio(chat_id=a_chat, audio=data["file_id"], caption=data.get("caption"))
                elif t == "video_note":
                    await context.bot.send_video_note(chat_id=a_chat, video_note=data["file_id"])
            except Exception:
                logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ A")

        await q.edit_message_text("–°–ø–∞—Å–∏–±–æ, —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã.", reply_markup=back_menu_kb())
        mark_completed_for_user(state, a_chat, qnum)
        clear_pending(state)
        auto_swap_roles(state)
        new_a, new_b = state["roles"]["A"], state["roles"]["B"]
        try: await context.bot.send_message(chat_id=new_a, text="–¢–µ–ø–µ—Ä—å —Ç—ã A ‚Äî –∑–∞–¥–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.", reply_markup=main_menu_kb())
        except Exception: logging.exception("notify A failed")
        try: await context.bot.send_message(chat_id=new_b, text="–¢–µ–ø–µ—Ä—å —Ç—ã B ‚Äî –∂–¥–∏ –≤–æ–ø—Ä–æ—Å.", reply_markup=main_menu_kb())
        except Exception: logging.exception("notify B failed")
        return
# ---------- send_question ----------
async def send_question(context: ContextTypes.DEFAULT_TYPE, state: Dict[str, Any], from_a: int, qnum: int, is_random: bool):
    b_chat = state["roles"]["B"]
    if not b_chat:
        await context.bot.send_message(chat_id=from_a, text="B –µ—â—ë –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è. –ü—É—Å—Ç—å –≤—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞–∂–º—ë—Ç /start.")
        return
    if state.get("pending"):
        await context.bot.send_message(chat_id=from_a, text="–£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –î–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞.")
        return
    if qnum < 1 or qnum > TOTAL_QUESTIONS:
        await context.bot.send_message(chat_id=from_a, text="–ù–æ–º–µ—Ä –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (1..127)."); return

    if qnum in get_completed_for_user(state, from_a):
        await context.bot.send_message(chat_id=from_a, text=f"–í–æ–ø—Ä–æ—Å ‚Ññ{qnum} —É–∂–µ –∑–∞–∫—Ä—ã—Ç –¥–ª—è —Ç–µ–±—è. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä."); return
    if is_fully_closed(state, qnum):
        await context.bot.send_message(chat_id=from_a, text=f"–í–æ–ø—Ä–æ—Å ‚Ññ{qnum} —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç (–æ–±–∞ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç—ã)."); return

    state["pending"] = {"to_user": b_chat, "from_user": from_a, "qnum": qnum}
    state["draft_answers"] = []
    save_state(state)

    qtext = QUESTIONS[qnum - 1]
    await context.bot.send_message(
        chat_id=from_a,
        text=f"–ì–æ—Ç–æ–≤–æ, —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Ññ{qnum} –ø–µ—Ä–µ–¥–∞–Ω. –ï–≥–æ —Ç–µ–∫—Å—Ç –∑–≤—É—á–∏—Ç —Ç–∞–∫:\n\n{qtext}"
    )

    prefix_b = "–ü—Ä–∏–≤–µ—Ç, —Ç–µ–±–µ –ø—Ä–∏—à–µ–ª —Ä–∞–Ω–¥–æ–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å" if is_random else "–ü—Ä–∏–≤–µ—Ç, —Ç–µ–±–µ –ø—Ä–∏—à–µ–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å"
    msg_b = (
        f"{prefix_b}.\n\n‚Ññ{qnum}: {qtext}\n\n"
        "–ó–∞–≥—Ä—É–∑–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–∫—Å—Ç–∞, –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫—Ä—É–∂–æ—á–∫–∞ ‚Äî –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ. "
        "–ê –ø–æ—Å–ª–µ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ü–µ—Ä–µ–¥–∞—Ç—å –æ—Ç–≤–µ—Ç¬ª."
    )
    await context.bot.send_message(chat_id=b_chat, text=msg_b, reply_markup=send_answer_kb())

# --------- –ú–ù–û–ì–û–û–¢–í–ï–¢–ù–û–°–¢–¨ –û–¢ B ---------
def _append_draft(state: Dict[str, Any], item: Dict[str, Any]) -> None:
    drafts = state.get("draft_answers") or []
    drafts.append(item)
    state["draft_answers"] = drafts
    save_state(state)

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    chat_id = update.effective_chat.id
    maybe_assign_B(state, chat_id)
    text = update.message.text or ""

    if context.user_data.get("await_qnum"):
        context.user_data["await_qnum"] = False
        if not is_user_A(state, chat_id):
            await update.message.reply_text("–°–µ–π—á–∞—Å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ A.", reply_markup=back_menu_kb()); return
        if not roles_assigned(state):
            await update.message.reply_text("–û–∂–∏–¥–∞—é –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (B) ‚Äî –ø—É—Å—Ç—å –Ω–∞–∂–º—ë—Ç /start.", reply_markup=back_menu_kb()); return
        if state.get("pending"):
            await update.message.reply_text("–£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –î–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞.", reply_markup=back_menu_kb()); return
        try:
            qnum = int(text.strip())
        except Exception:
            await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 127.", reply_markup=back_menu_kb()); return
        if qnum in get_completed_for_user(state, chat_id):
            await update.message.reply_text(f"–í–æ–ø—Ä–æ—Å ‚Ññ{qnum} —É–∂–µ –∑–∞–∫—Ä—ã—Ç –¥–ª—è —Ç–µ–±—è. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.", reply_markup=back_menu_kb()); return
        if is_fully_closed(state, qnum):
            await update.message.reply_text(f"–í–æ–ø—Ä–æ—Å ‚Ññ{qnum} —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç (–æ–±–∞ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç—ã).", reply_markup=back_menu_kb()); return
        await send_question(context, state, from_a=chat_id, qnum=qnum, is_random=False); return

    if state.get("pending") and state["pending"]["to_user"] == chat_id and is_user_B(state, chat_id):
        _append_draft(state, {"from_user": chat_id, "type": "text", "data": {"text": text}})
        await update.message.reply_text("–¢–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç. –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–ü–µ—Ä–µ–¥–∞—Ç—å –æ—Ç–≤–µ—Ç¬ª.", reply_markup=send_answer_kb()); return

    if text.strip().lower() in {"–≤–æ–ø—Ä–æ—Å", "–Ω–∞–ø–æ–º–Ω–∏", "–Ω–∞–ø–æ–º–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å"}:
        await resend_current_question(context, state, to_chat_id=chat_id); return

    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb())

async def on_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    chat_id = update.effective_chat.id
    maybe_assign_B(state, chat_id)
    if state.get("pending") and state["pending"]["to_user"] == chat_id and is_user_B(state, chat_id):
        voice = update.message.voice; caption = update.message.caption
        _append_draft(state, {"from_user": chat_id, "type": "voice", "data": {"file_id": voice.file_id, "caption": caption}})
        await update.message.reply_text("–ì–æ–ª–æ—Å–æ–≤–æ–µ –ø—Ä–∏–Ω—è—Ç–æ. –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–ü–µ—Ä–µ–¥–∞—Ç—å –æ—Ç–≤–µ—Ç¬ª.", reply_markup=send_answer_kb()); return
    await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.", reply_markup=back_menu_kb())

async def on_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    chat_id = update.effective_chat.id
    maybe_assign_B(state, chat_id)
    if state.get("pending") and state["pending"]["to_user"] == chat_id and is_user_B(state, chat_id):
        audio = update.message.audio; caption = update.message.caption
        _append_draft(state, {"from_user": chat_id, "type": "audio", "data": {"file_id": audio.file_id, "caption": caption}})
        await update.message.reply_text("–ê—É–¥–∏–æ –ø—Ä–∏–Ω—è—Ç–æ. –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–ü–µ—Ä–µ–¥–∞—Ç—å –æ—Ç–≤–µ—Ç¬ª.", reply_markup=send_answer_kb()); return
    await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.", reply_markup=back_menu_kb())

async def on_video_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    chat_id = update.effective_chat.id
    maybe_assign_B(state, chat_id)
    if state.get("pending") and state["pending"]["to_user"] == chat_id and is_user_B(state, chat_id):
        vn = update.message.video_note
        _append_draft(state, {"from_user": chat_id, "type": "video_note", "data": {"file_id": vn.file_id}})
        await update.message.reply_text("–ö—Ä—É–∂–æ—á–µ–∫ –ø—Ä–∏–Ω—è—Ç. –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–ü–µ—Ä–µ–¥–∞—Ç—å –æ—Ç–≤–µ—Ç¬ª.", reply_markup=send_answer_kb()); return
    await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.", reply_markup=back_menu_kb())

async def on_other(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    chat_id = update.effective_chat.id
    maybe_assign_B(state, chat_id)
    await update.effective_chat.send_message("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å, –∞—É–¥–∏–æ, –∫—Ä—É–∂–æ—á–µ–∫. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É ¬´–ù–∞–ø–æ–º–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å¬ª.", reply_markup=back_menu_kb())
def build_app() -> Application:
    if not TOKEN:
        raise RuntimeError("–ù–µ—Ç TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("stats", stats_cmd))
    app.add_handler(CommandHandler("question", question_cmd))
    app.add_handler(CommandHandler("reset", reset_cmd))
    app.add_handler(CommandHandler("list", list_questions))

    app.add_handler(CallbackQueryHandler(on_button))

    app.add_handler(MessageHandler(filters.VOICE, on_voice))
    app.add_handler(MessageHandler(filters.AUDIO, on_audio))
    app.add_handler(MessageHandler(filters.VIDEO_NOTE, on_video_note))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    app.add_handler(MessageHandler(~(filters.TEXT | filters.VOICE | filters.AUDIO | filters.VIDEO_NOTE), on_other))
    return app

def main():
    app = build_app()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (polling)...")
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
